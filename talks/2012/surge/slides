<div class="slide" data-transition="none"><div class="content title-slide" ref="./01main/1">
<h1>Herding Queries</h1>

<h3>JOINs..</h3>

<h3>Between Heterogeneous Datastores..</h3>

<h3>Over the Network..</h3>

<h3>What Could Possibly Go Wrong?</h3>

<p>Mikhail Panchenko, Surge 2012</p>

<p><img src="surgepreso_files/ua_logo.png" height="48"/></p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/2">
<h1>HI!</h1>

<p>My name is Pancakes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/3">
<h2>SimpleGeo Storage Platform Team</h2>

<p><img src="surgepreso_files/moar.png" height="272" class="shadow"/></p>

<h2>Urban Airship Messaging Team</h2>

<p class="notes">acquired for spatial expertese and amazing slide templates</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/4">
<h1>Goal: Location-based Push</h1>

<h3>Bonus: Complex Predicate-based Push</h3>

<p class="notes">querying by location only is not very compelling on its own</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/5">
<h1>( very nice, but very difficult things )</h1>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/6">
<p><img src="surgepreso_files/segments.png" height="550" class="shadow"/></p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/7">
<h1>Requirements</h1>

<ul>
<li><ul>
<li>Low time to first push</li>
<li>Constant, high throughput</li>
<li>Millions of devices</li>
<li>Horizontal scalability</li>
<li>All the things</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/8">
<h3>"Perhaps you'd also like the key to the apartment</h3>

<p><img src="surgepreso_files/bender.jpg" height="277" class="shadow"/></p>

<h3>where the money is stashed?"</h3>

<p><small>image credit: <a href="http://rt.com/art-and-culture/news/bender-ostap-tears-moscow/">russia today</a></small>

<p class="notes">famous quote.. well, famous if you're russian</p>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/9">
<h1>Yes, and also..</h1>

<h3>Platform-specific data and operations</h3>

<ul>
<li><ul>
<li>Push platform identifying tokens</li>
<li>"quiet time"

<ul>
<li>can't enforce at device level on all platforms</li>
</ul>
</li>
<li>"Badge" updates, etc</li>
</ul>
</li>
</ul>


<h3>Per-device lookups + updates</h3>

<p class="notes">this is a big issue - every device being sent to has to be looked up by its ID - key value read</p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/10">
<h1>Tag Predicates</h1>

<ul>
<li><ul>
<li>Tags set via the device SDK or directly by the developer (API)</li>
<li>Most likely: identify interest expressed by user

<ul>
<li><code>team:blues</code></li>
<li><code>likes:beyonce</code></li>
<li><code>dislikes:thekillers</code></li>
</ul>
</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/11">
<h1>Tag Predicates</h1>

<ul>
<li><ul>
<li>Only supported disjunctive (OR) selection

<ul>
<li>Useful, but limiting</li>
<li>Workarounds: <code>likes:beyonce_dislikes:thekillers</code>

<ul>
<li>This does not scale</li>
</ul>
</li>
</ul>
</li>
<li>High cardinality

<ul>
<li>a device can have thousands of tags (<strong>important</strong>)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p class="notes">another example: sports app - likes team, has these specific alerts turned on</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/12">
<p><img src="surgepreso_files/score.png" height="500" class="shadow"/></p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/13">
<h1>Location Predicates</h1>

<ul>
<li><ul>
<li>Completely new concept, lots of possibilities

<ul>
<li>Last seen inside a polygon

<ul>
<li>City</li>
<li>Neighborhood</li>
<li>Stadium (seriously)</li>
</ul>
</li>
<li>Has been in a polygon within an interval (historic)</li>
</ul>
</li>
<li><strong>Recall</strong>: SimpleGeo put a lot of effort into flexible querying of geodata.</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/14">
<h1>CloudStock, 2010</h1>

<p><img src="surgepreso_files/sg-index-slide.png" height="450" class="shadow"/></p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/15">
<h1>SimpleGeo Index Tech</h1>

<ul>
<li><ul>
<li>The index part of a DBMS, housed in a DHT

<ul>
<li>All the nice properties of the DHT</li>
<li>All the annoying properties of the DHT</li>
</ul>
</li>
<li>Supports several types of trees

<ul>
<li>BPlusTree</li>
<li>KDtree (most used)

<ul>
<li>think BPlusTree with K dimensions</li>
<li>great for data with known dimensionality; flexible queries</li>
</ul>
</li>
<li>RTree</li>
</ul>
</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/16">
<h1><span class="tag">Tags</span> and <span class="location">Location</span> Sitting in a Tree</h1>

<ul>
<li><ul>
<li>Presupposes boolean algebra

<ul>
<li><span class="location">in SF</span> ^ <span class="tag">likes Dave Chappelle</span></li>
<li><span class="location">in SF</span> ^ <span class="tag">&#xAC;owns a car</span></li>
<li>(<span class="location">in SF</span> &#x2228; <span class="location">in Oakland</span>) ^ <span class="tag">likes the Giants</span></li>
</ul>
</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/17">
<h1>"An RDBMS will do all that!"</h1>

<p><img src="surgepreso_files/enthusiasm.png" height="450" class="shadow"/></p>

<p><small>photo by <a href="http://www.flickr.com/photos/carbonnyc/4318504691">carbonnyc</a></small></p>

<p class="notes">pro-tip: if you blanket set all your photos to Creative Commons license, some asshole will use them for presentations</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/18">
<p><img src="surgepreso_files/overloaded.jpg" height="500" class="shadow"/></p>

<p><small>photo by <a href="http://www.flickr.com/photos/belsymington/4102783610/">belsymington</a></small></p>

<p class="notes">not all RDBMSs will even do that, and the ones that do get really unwieldy at our data size</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/19">
<p><img src="surgepreso_files/overloaded_annotated.jpg" height="500" class="shadow"/></p>

<p><small>photo by <a href="http://www.flickr.com/photos/belsymington/4102783610/">belsymington</a></small></p>

<p class="notes">100MM installs, trending towards 1B. Most customers &lt;= 10M, with a few notable, crucial exceptions</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/20">
<h1><span class="tag">Tag</span> solutions</h1>

<h2>don't incorporate spatial queries well</h2>

<h1><span class="location">Spatial</span> solution</h1>

<h2>doesn't scale to arbitrary tag cardinality</h2>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/21">
<h1>Don't forget Platform-specific data!</h1>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/22">
<h1>How Do We Put It All Together?</h1>

<p><img src="surgepreso_files/puzzle.jpg" height="427" class="shadow"/></p>

<p><small>photo by <a href="http://www.flickr.com/photos/theotter/6590636397">theotter</a></small></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/23">
<p><img src="surgepreso_files/wecandoit.jpg" height="500" class="shadow"/></p>

<p><small>credit: <a href="http://en.wikipedia.org/wiki/We_Can_Do_It!">wikipedia</a></small></p>

<p class="notes">This appears to be a simple matter of programming</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/24">
<h1>What Would a Database Do?</h1>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/25">
<h1>Vague Data Model</h1>

<ul>
<li><ul>
<li>Table for <span class="location">device location and history</span>

<ul>
<li>Primary Key: <strong><code>appId:deviceId</code></strong></li>
</ul>
</li>
<li>Table for <span class="tag">tag data</span>

<ul>
<li>probably just one table and lots of self joins</li>
<li>Primary Key: <strong><code>appId:deviceId</code></strong></li>
</ul>
</li>
<li>Table for <span class="platform">platform-specific data</span>

<ul>
<li>has to be joined to everything</li>
<li>Primary Key: <strong><code>appId:deviceId</code></strong></li>
</ul>
</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/26">
<h1>Aside: Data Clustering</h1>

<h2>An Optimization</h2>

<p>Most RDBMSs offer this in some form.</p>

<p>MySQL/InnoDB does it automatically for primary keys.</p>

<p><strong>Data is stored on disk in index-order</strong></p>

<p><strong>Queries ordered on this index scan sequentially</strong></p>

<p>This is important.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/27">
<h1>The Life of a Query</h1>

<ul>
<li><ul>
<li>Parse</li>
<li>Plan</li>
<li>Perform</li>
<li>Respond</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/28">
<h1>The Life of a Query</h1>

<ul>
<li><ul>
<li>Parse - turn query into an logical tree</li>
<li><strong>Plan</strong> - figure out cheapest logical equivalent</li>
<li><strong>Perform</strong> - fetch, sort, merge, etc.</li>
<li>Respond - send result back to client</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/29">
<h1>Example</h1>

<p><img src="surgepreso_files/operatortree.png" height="450" class="shadow"/></p>

<p><small>source: [ 1 ]</small></p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/30">
<h1>Example</h1>

<p><img src="surgepreso_files/operatortree-annotated.png" height="450" class="shadow"/></p>

<p><small>source: [ 1 ]</small></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/31">
<h2><strong>The Logic Only Cares About Tuples</strong></h2>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/32">
<h1>How Do I JOIN?</h1>

<p><img src="surgepreso_files/sortmergejoin.png" height="450" class="shadow"/></p>

<p>Basic Sort Merge Join Algo from [ 2 ]</p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/33">
<h1>How Do I JOIN?</h1>

<ul>
<li><ul>
<li>Fetch</li>
<li>Sort</li>
<li>Merge</li>
<li>Return Matches</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/34">
<h1>How Do I JOIN?</h1>

<ul>
<li><ul>
<li>Fetch</li>
<li><strong>Sort</strong> - recall clustered keys</li>
<li>Merge</li>
<li>Return Matches</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/35">
<h1>Phrasing is Important</h1>

<p><img src="surgepreso_files/shoppingcart.jpg" height="400" class="shadow"/></p>

<h3>What Do We REALLY Need?</h3>

<p><small>photo by <a href="http://www.flickr.com/photos/jessalyn/7333566838/">jessalyn</a></small></p>

<p class="notes">I'm never gonna eat all those pineapples</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/36">
<h1>"Query arbitrary combinations of spatial and tag data in real time."</h1>

<p class="notes">makes it seem like we'd have to try and implement the entire RDMBs query stack</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/37">
<h1>"Send to devices<br/><br/>matching an arbitrarily nested predicate<br/><br/> in any order."</h1>

<p class="notes">those are actually quite different</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/38">
<h3>Ordering Doesn't Matter, So Pick One</h3>

<h1>Order by Application ID and Device ID</h1>

<p class="notes">force global ordering on disk, in queries. clustering can be taken for granted &amp; we get to skip the "sort" in sort-merge-join</p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/39">
<h1>So What Do We End Up With?</h1>

<ul>
<li><ul>
<li><span class="location">Location</span> index returns results in ID order</li>
<li><span class="tag">Tag</span> index stored in ID order</li>
<li><span class="platform">Platform</span> data stored in ID order</li>
</ul>
</li>
</ul>


<h3>Any Ordered Partitioner For <span class="tag">Tags</span> and <span class="platform">Platform</span> Data</h3>

<h3><span class="location">Location</span> Index Not Clustered, But Could Be</h3>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/40">
<h1>Only Sequential Reads<br/>for <span class="tag">Tag</span> and <span class="platform">Platform</span> indexes</h1>

<h3>Huge Performance Win,<br/>Even With SSDs</h3>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/41">
<h1>All indexes support efficient cursor pagination &amp; can skip forward</h1>

<h3>Optimizes JOINing Sets Of Wildly Disparate Sizes</h3>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/42">
<h1>Only Return The Exact Set Requested</h1>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/43">
<h1>How Do I JOIN?</h1>

<p><img src="surgepreso_files/sortmergejoin-reduced.png" height="450" class="shadow"/></p>

<p>Basic Sort Merge Join Algo from [ 2 ]</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/44">
<h1>One More Time, With Feeling</h1>

<p><img src="surgepreso_files/mergejoinwithfeeling.png" height="450" class="shadow"/></p>

<p>Datastores Connected By The Query Execution Service</p>

<p class="notes">putting a service in production called "gooeybuttercake" is my crowning achievement</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/45">
<h1>Mmmmmmm Gooey Butter Cake</h1>

<p><img src="surgepreso_files/gbc.jpg" height="400" class="shadow"/></p>

<p><small>photo by <a href="http://www.flickr.com/photos/montage_man/4152261542">montage man</a></small></p>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/46">
<h1>The Life of a Query, Revisited</h1>

<ul>
<li><ul>
<li><s>Parse</s> - tree passed directly in</li>
<li><s><strong>Plan</strong></s> - we know optimal plan up-front</li>
<li><strong>Perform</strong> - fetch, <s>sort</s>, merge, etc.</li>
<li>Respond - send result back to client</li>
</ul>
</li>
</ul>


<p class="notes">the way the UI is constructed makes it easy enough to just build a tree structure up front</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/47">
<p><img src="surgepreso_files/segments-ui.png" height="500" class="shadow"/></p>

<p class="notes">turns into JSON which maps to protobufs</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/48">
<h1>And Now, Story Time</h1>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/49">
<h1>How Fast Is Too Fast?</h1>

<p><img src="surgepreso_files/firehose.jpg" height="400" class="shadow"/></p>

<h3>Certain Apps With Large Install Bases and High Push Open Rates DoS Themselves If We Deliver Too Quickly</h3>

<p><small>photo by <a href="http://www.flickr.com/photos/usnavy/5764376361">usnavy</a></small>

<p class="notes">this is a general phenomenon not specific to this project that we observe when we make something a lot faster. Talk about an unexpected side effect!</p>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/50">
<h1>DeMorgan's Law is Your Friend</h1>

<h3>Sometimes you forget that your system is supposed to support NOTs until the day before it's supposed to launch.</h3>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/51">
<h1>You're gonna have a bad time</h1>

<p><img src="surgepreso_files/investigate.png" height="150" class="shadow"/></p>

<h3>Generally, It Helps to Understand the Logic</h3>

<p class="notes">What I'm really saying: it's 9pm and I just realized that the logic for negation is completely incorrect. Also, yes, I know, this isn't specifically DeMorgans</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/52">
<h3>The opposite of <br/></h3>

<h1>"Has been to DR in the last month" <br/></h1>

<h3>is</h3>

<h1>"Has NOT been to DR in the last month"</h1>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/53">
<h3>Not</h3>

<h1>"Has been to any place other than DR any time other than last month"</h1>

<h3>"Has Been" Predicates Implemented As Range Constraints.</h3>

<h3>Can't just invert the ranges and slap a NOT on there</h3>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/54">
<p><img src="surgepreso_files/blegh.jpg" height="427" class="shadow"/></p>

<p><small>photo by <a href="http://www.flickr.com/photos/tehf0x/">tehf0x</a></small></p>

<p class="notes">I have to use a photo because I can never recreate that exact expression</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/55">
<h1>Attention To Detail Is Important</h1>

<p><img src="surgepreso_files/attention.jpg" height="200" class="shadow"/></p>

<p class="notes">this diff is funny to me because it came after like 3 hours of debugging why NOTs weren't working correctly</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/56">
<h1>skipTo Considered Harmful</h1>

<p class="notes">due to an accident of history (the naive [) range parsing on our spatial index), the whole thing was built around iterators that can skipTo, not skipPast</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/57">
<h1>What If You skipTo This?</h1>

<pre><code>0    aaaaaaaaaaaaaaaaaaaaaaaa
1    aaaaaaaaaaaaaaaaaaaaaaaa
2    aaaaaaaaaaaaaaaaaaaaaaaa
3    aaaaaaaaaaaaaaaaaaaaaaaa
4    aaaaaaaaaaaaaaaaaaaaaaaa
5    aaaaaaaaaaaaaaaaaaaaaaaa
6    aaaaaaaaaaaaaaaaaaaaaaaa
7    aaaaaaaaaaaaaaaaaaaaaaaa
...
1001 aaaaaaaaaaaaaaaaaaaaaaaa
</code></pre>

<p class="notes">your batch size is 1000, so you query 1000+1 and skipTo the 1001st result for the next page</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/58">
<p><img src="surgepreso_files/infinipush2.jpg" height="326" class="shadow"/></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/59">
<p><img src="surgepreso_files/infinipush1.png" height="326" class="shadow"/></p>

<p class="notes">this is how you overheat an iPhone</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="./01main/60">
<p><img src="surgepreso_files/tpsboss.jpg" height="360" class="shadow"/></p>

<h3>"What's uhhh going on with that JIRA?"</h3>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./01main/61">
<h1>Solution</h1>

<ul>
<li><ul>
<li>Implement Uniques At The Data Stores</li>
<li>Switch to "skipPast"</li>
<li>Enforce monotonic order (next &gt; last)</li>
</ul>
</li>
</ul>


<h2><strong>Don't be an idiot</strong></h2>
</div>
</div><div class="slide" data-transition="none"><div class="content bullets" ref="./02fin/1">
<h1>THANKS!</h1>

<h3>We're hiring!</h3>

<ul>
<li><hr/>

<ul>
<li>@mihasya</li>
<li>github.com/mihasya</li>
<li>blog.mihasya.com</li>
<li>pancakes@urbanairship.com</li>
<li>urbanairship.com/jobs/</li>
</ul>
</li>
</ul>

</div>
</div><div class="slide" data-transition="none"><div class="content references" ref="./02fin/2">
<h1>References</h1>

<ol>
<li>Surajit Chaudhuri, An overview of query optimization in relational systems, Proceedings of the seventeenth ACM SIGACT-SIGMOD-SIGART symposium on Principles of database systems, p.34-43, June 01-04, 1998, Seattle, Washington, United States  [doi&gt;10.1145/275487.275492]</li>
<li>Leonard D. Shapiro, Join processing in database systems with large main memories, ACM Transactions on Database Systems (TODS), v.11 n.3, p.239-264, Sept. 1986  [doi&gt;10.1145/6314.6315]</li>
</ol>

</div>
</div>
